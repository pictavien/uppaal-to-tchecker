#!/usr/bin/awk -f 
## #############################################################
## Generates fischer n
## #############################################################
## writes files
##  fischer_input_XX.ta
##  fischer_input_XX.q
##  
##  where XX is a two-digit decimal for n
## #############################################################
## 
## Synopsis:
##  Finding good switch settings for UML-2001 paper :o)
## #############################################################
## @FILE:    generate.awk
## @PLACE:   BRICS AArhus; host:harald
## @FORMAT:  awk
## @AUTHOR:  M. Oliver M'o'ller     <omoeller@brics.dk>
## @BEGUN:   Wed Sep 12 20:44:41 2001
## @VERSION: Fri Sep 14 09:40:37 2001
## #############################################################
## 

## ###################################################################
## Disclaimer
## ###################################################################

function disclaimer(i, OUT){
    #ret=time[1];
    #ret=time["second"];
    #ret = strftime("%a %b %d %H:%M:%S %Z %Y");
    print "// ------------------------------------------------------------ "  > OUT;
    print "// Fischer " i > OUT;
    print "// " > OUT;
    print "// automatically generated by script generate.awk "  > OUT;
    print "// M. Oliver Moeller <omoeller@brics.dk> "  > OUT;
    print "// Wed Sep 12 20:44:41 2001 "  > OUT;
    print "// ------------------------------------------------------------ "  > OUT;
}



function clocks(i, OUT){
    ORS="" ;
    print "clock " > OUT;
    for(v = 1; v <= i; v++){
	print "x" v  > OUT;
	if(v < i){ print ", "  > OUT; }
    }
    print ";\n"  > OUT;
    print "int id;\n"  > OUT;
    print "const k 2;\n"  > OUT;
    print "\n"  > OUT;
    ORS="\n";
}

function systemdef(i, OUT){
    ORS="" ;
    print "system " > OUT;
    for(v = 1; v <= i; v++){
	print "p" v  > OUT;
	if(v < i){ print ", "  > OUT; }
    }
    print ";\n"  > OUT;
    print "\n"  > OUT;
    ORS="\n";
}

function process(i, OUT){
    print "process p" i " {" > OUT;
    print "  state  a, b {x" i "<=k}, c, cs;" > OUT;
    print "  init   a;" > OUT;
    print "  trans  a -> b {" > OUT;
    print "           guard  id==0;" > OUT;
    print "           assign x" i ":=0;" > OUT;
    print "         }," > OUT;
    print "           b -> c {" > OUT;
    print "           guard  x" i "<=k;" > OUT;
    print "           assign x" i ":=0,id:=" i ";" > OUT;
    print "         }," > OUT;
    print "           c -> b {" > OUT;
    print "           guard  id==0;" > OUT;
    print "           assign x" i ":=0;" > OUT;
    print "         }," > OUT;
    print "           -> cs {" > OUT;
    print "           guard  x" i ">k,id==" i ";" > OUT;
    print "         }," > OUT;
    print "           cs -> a {" > OUT;
    print "           assign x" i ":=0,id:=0;" > OUT;
    print "         };" > OUT;
    print "}" > OUT;
    print "" > OUT;
}


function mutex(i, OUT){
    ORS="" ;
    print "A[] not (" > OUT;
    for(v = 2; v <= i; v++){
	print "(p" v ".cs and (" > OUT;
	for (w = 1; w < v; w++){
	    print "p" w ".cs" > OUT;
	    if(w+1 < v){ print " or " > OUT ; }
	}
	print "))"> OUT ;
	if(v < i){ print " or "> OUT ; }
    }
    print " )\n"> OUT ;
    ORS="\n";
}

BEGIN {
  if(ARGC!=2) {
    print "wrong number of arguments" | "cat 1>&2";
    exit(1);
  }
 N = ARGV[1] + 0;

 print "** " N    ;
  if(N<=0) {
    print "*** non valid `N' (use option -vN=# )" | "cat 1>&2"
    exit 1
  }
#  printf "%02d\n", N;
## -- set output names ------------------------------------------
  if( N >= 10 ) { 
      OUTPUT_Q =("fischer_input_" N ".q"); 
      OUTPUT_TA=("fischer_input_" N ".ta"); }
  else {
      OUTPUT_Q =("fischer_input_0" N ".q");
      OUTPUT_TA=("fischer_input_0" N ".ta"); }
## -- generate .ta ---------------------------------------------------------
  disclaimer(N, OUTPUT_TA);
  clocks(N, OUTPUT_TA);
  for(v = 1; v <= N; v++){
      process(v, OUTPUT_TA);
  }
  systemdef(N,OUTPUT_TA);
## -- generate .q ----------------------------------------------------------
  mutex(N, OUTPUT_Q);
## -------------------------------------------------------------------------
  close(OUTPUT_TA);
  close(OUTPUT_Q);
}
